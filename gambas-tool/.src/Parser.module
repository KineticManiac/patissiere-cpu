' Gambas module file

Public Function Parse(StatementList As Statement[]) As Program
  
  Dim vProgram As Program = New Program
  Dim tDataBytes As DataByte[]
  
  For Each iStatement As Statement In StatementList
    Dim vCommand As Token = iStatement.Tokens[0]
    Select Case vCommand.Type
      Case Token.TYPE_DIRECTIVE
        For i As Integer = 1 To iStatement.Tokens.Length - 1 Step 2
          Dim vArg As Token = iStatement.Tokens[i]
          
          Select Case vArg.Type
            Case Token.TYPE_STRING
              For j As Integer = 0 To vArg.Word.Length - 1
                Dim unicode As Integer = String.Code(vArg.Word, j)
                tDataBytes = GetDataBytes(vCommand.Word, unicode)
                
                For Each iDataByte As DataByte In tDataBytes
                  vProgram.Data.Add(iDataByte)
                Next
              Next
            Case Token.TYPE_NUMERIC
              tDataBytes = GetDataBytes(vCommand.Word, vArg.Word)
              For Each iDataByte As DataByte In tDataBytes
                vProgram.Data.Add(iDataByte)
              Next
            Case Else 
              Error.Raise("This shouldn't happen!")
          End Select
        Next
      Case Token.TYPE_OPCODE
        Select Case vCommand.Word
            Case "J"
            Case "JEQ"
            Case "JNE"
            Case "JLT"
            Case "JGE"
            Case "JLTU"
            Case "JGEU"
            Case "JLE"
            Case "JGT"
            Case "JLEU"
            Case "JGTU"
            Case "JO"
            Case "JNO"
            Case "JS"
            Case "JNS"
            Case "LDB", "LDH", "LDW", "STB", "STH", "STW"
            Case "CMP", "AND", "OR", "XOR", "ADD", "ROL", "ROR", "TEST", "MOV", "MOVEQ", "MOVNE"
            Case "ANDN", "ORN", "XNOR", "SH1ADD", "SH2ADD", "SH3ADD", "SUB", "ZEXTB", "ZEXTH", "SEXTB", "SEXTH", "TESTN", "MOVLT", "MOVLE", "MOVGT", "MOVGE", "MOVLTU", "MOVLEU", "MOVGTU", "MOVGEU", "MOVS", "MOVNS", "MOVO", "MOVNO"
            Case "SH1", "SH2", "SH3", "SRA", "SRL"
            Case "ENTER", "ENTERL", "EXIT", "EXITL"
              vProgram.Instructions.Add(EnterExit(iStatement))
            Case "NOP", "RET", "LINK"
              vProgram.Instructions.Add(NoArguments(iStatement))
            Case Else 
              Error.Raise("This shouldn't happen!")
        End Select
      Case Else 
        Error.Raise("This shouldn't happen!")
    End Select
  Next
End 
  
Private Function OpSourceReg(StatementA As Statement) As Instruction
  
  Dim Tokens As Token[] = StatementA.Tokens
  
  If Tokens[1].Type <> Token.TYPE_REGISTER Or If Tokens[2].Word <> "," Or If Tokens[3].Type <> Token.TYPE_REGISTER Then Error.Raise("Invalid syntax for " & Tokens[0].Word)
  
  Dim RegDest As Argument = New ArgRegister(Utility.StrInList(Tokens[1].Word))
  Dim RegSource As Argument = New ArgRegister(Utility.StrInList(Tokens[3].Word))
  
  Return Instruction.Build(StatementA.Address, Tokens[0].Word, RegDest, RegSource)
End

  
Private Function EnterExit(StatementA As Statement) As Instruction
  
  If StatementA.Tokens[1].Word <> "[" Or If StatementA.Tokens[3].Word <> "-" Or If StatementA.Tokens[5].Word <> "]" Then Error.Raise("Invalid syntax for " & StatementA.Tokens[0].Word)
  If StatementA.Tokens[2].Type <> Token.TYPE_REGISTER Or If StatementA.Tokens[4].Type <> Token.TYPE_REGISTER Then Error.Raise("Invalid syntax for " & StatementA.Tokens[0].Word)
  
  Dim ExtraSpace As Integer
  If StatementA.Tokens.Length = 6 Then 
    ExtraSpace = 0
  Else If StatementA.Tokens.Length = 8 Then 
    If StatementA.Tokens[6].word <> "," Or If StatementA.Tokens[7].Type <> Token.TYPE_NUMERIC Then Error.Raise("Invalid syntax for " & StatementA.Tokens[0].Word)
    
    ExtraSpace = StatementA.Tokens[7].Word
  Else 
    Error.Raise("Invalid syntax for " & StatementA.Tokens[0].Word)
  Endif
  
  Dim RegIndex1 As Integer = Utility.StrInList(StatementA.Tokens[2].Word, Keywords.REGISTERS)
  Dim RegIndex2 As Integer = Utility.StrInList(StatementA.Tokens[4].Word, Keywords.REGISTERS)
  
  If RegIndex1 > 15 Or If RegIndex2 > 15 Then Error.Raise("Register list cannot include SP, AP, BP, CP, or LR")
  If RegIndex1 <> 0 Then Error.Raise("Register list must start from R0")
  If RegIndex2 % 2 <> 1 Then Error.Raise("Register list must end with an odd-indexed register")
  
  Dim RegCount As Integer = RegIndex2 + 1
  Dim Arg1 As Argument = New ArgRegList(RegCount)
  
  Dim TotalSpace As Integer = ExtraSpace + RegCount * 4
  Dim Arg2 As Argument = New ArgNumeric(TotalSpace)
  
  Return Instruction.Build(StatementA.Address, StatementA.Tokens[0].Word, Arg1, Arg2)
  
End

  
Private Function NoArguments(StatementA As Statement) As Instruction
  
  If StatementA.Tokens.Length <> 1 Then Error.Raise("Too many arguments for " & StatementA.Tokens[0].Word)
  
  Return Instruction.Build(StatementA.Address, StatementA.Tokens[0].Word)
  
End

  
Private Function GetDataBytes(DeclType As String, Value As Integer) As DataByte[]
  'TO-DO: Get dem data bayts!
End 
