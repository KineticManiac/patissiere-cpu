' Gambas class file

Enum OP_J, OP_JEQ, OP_JNE, OP_JLT, OP_JGE, OP_JGTU, OP_JLEU, OP_JLE, OP_JGT, OP_JGEU, OP_JLTU, OP_JO, OP_JNO, OP_JS, OP_JNS, OP_TEST, OP_TESTN, OP_AND, OP_ANDN, OP_OR, OP_ORN, OP_XOR, OP_XNOR, OP_STB, OP_STH, OP_STW, OP_LDB, OP_LDH, OP_LDW, OP_SHADD, OP_ADC, OP_SBC, OP_SUB, OP_ZEXTB, OP_ZEXTH, OP_SEXTB, OP_SEXTH, OP_CMP, OP_MOV, OP_MOVEQ, OP_MOVNE, OP_MOVLT, OP_MOVGE, OP_MOVLE, OP_MOVGT, OP_MOVO, OP_MOVNO, OP_MOVS, OP_MOVNS, OP_MOVGTU, OP_MOVLEU, OP_MOVGEU, OP_MOVLTU, OP_TEST_I, OP_AND_I, OP_OR_I, OP_XOR_I, OP_STW_I, OP_LDW_I, OP_ADD_I, OP_SH, OP_SRL, OP_SRA, OP_CMP_I, OP_MOV_I, OP_MOVEQ_I, OP_MOVNE_I, OP_ENTER, OP_ENTERL, OP_EXIT, OP_EXITL, OP_LINK, OP_RET, OP_LDW_P, OP_MOV_RP, OP_MOV_RL, OP_STW_P, OP_MOV_PR, OP_MOV_LR, OP_LDW_PI, OP_STW_PI, OP_ROR, OP_ROL, OP_RCL

Public Address As Long
Public Operation As Integer
Public Arguments As Argument[]

Public Sub _new(Address As Long, Operation As String)
  
  Me.Address = Address
  Me.Operation = Operation
  Me.Arguments = []
  
End

Static Public Function Build(Address As Long, Operation As String, ...) As Instruction
  
  Dim Result As Instruction = New Instruction(Address, Operation)
  
  For Each iVar As Argument In Param.All
    Result.Arguments.Add(iVar)
  Next
  
  Return Result
  
End
